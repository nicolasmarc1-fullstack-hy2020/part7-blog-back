// import dependencies
const config = require('./utils/config')
const express = require('express')
require('express-async-errors')
const app = express()
const cors = require('cors')
const blogsRouter = require('./controllers/blogs')
const usersRouter = require('./controllers/users')
const loginRouter = require('./controllers/login')
const middleware = require('./utils/middleware')
const logger = require('./utils/logger')
const mongoose = require('mongoose')
// avoid depreciation concflicts
mongoose.set('useFindAndModify', false)
mongoose.set('useCreateIndex', true)

// db connection
logger.info('connecting to', config.MONGODB_URI)
mongoose.connect(config.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    logger.info('connected to MongoDB')
  })
  .catch((error) => {
    logger.error('error connecting to MongoDB:', error.message)
  })


// middleware use
app.use(cors())
app.use(express.static('build')) // use static ressources generated by front in build folder
app.use(express.json())
app.use(middleware.requestLogger) // need to be included after because otherwise won't be able to use parser to see what's in the body
app.use(middleware.tokenExtractor)

// routing
app.use('/api/blogs', blogsRouter)
app.use('/api/users', usersRouter)
app.use('/api/login', loginRouter)

if(process.env.NODE_ENV === 'test'){
  const testingRouter = require('./controllers/testing')
  app.use('/api/testing', testingRouter)
}


// ending middleware use if no route handled the http request
app.use(middleware.unknownEndpoint)
app.use(middleware.errorHandler)

module.exports = app